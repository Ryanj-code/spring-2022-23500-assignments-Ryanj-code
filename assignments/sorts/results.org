Observations from testing sorts:
  
  Based on the results that I got from testing the merge sort, original quick sort, and in-place quick sort:

  Randomized:
  
  The merge sort was consistent as the size to be sorted increased. On the other hand, the bad quick sort was faster at first when the size is small, 
  but it took much longer than the merge sort when the size increased. The original quick sort with both good and bad pivots took the same amount of time to complete. 
  While the in-place quick sort with good and bad pivot was faster than both the bad quick sort and merge sort. 
  
  Sorted:
  
  The merge sort performed consistently and was much faster than both the original quick sorts while the in-place quick sort was much faster than bad quick sort 
  because it does not check as much due to the pivot. One thing to note is that when the size became too big, the original quick sort would take too long due to the
  memory allocation and would lead to the termination of the program.

  Conclusion: 

  The merge sort stayed consistent as the size went from small to bigger sizes, while the original quick sort was fast, but the time increased much quicker and 
  took longer than the merge sort later on. The in-place quick sort stayed fast and was quicker than both the other two sorts from smaller sizes to bigger sizes.
